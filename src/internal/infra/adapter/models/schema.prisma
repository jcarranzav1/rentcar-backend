generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Cars {
  id          String    @id @default(uuid())
  model       String    @db.VarChar(255)
  price       Int
  type        String
  make        String
  seats       String
  doors       String?
  description String?   @db.Text
  isRented    Boolean   @default(false)
  photos      String[]  @default([])
  ownerId     String
  owner       Owner     @relation(fields: [ownerId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Booking     Booking[]
}

model User {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(25)
  lastname  String    @db.VarChar(25)
  email     String    @unique
  password  String
  cellphone String?   @db.VarChar(25)
  country   String?   @db.VarChar(25)
  state     String?   @db.VarChar(25)
  about     String?   @db.Text
  photo     String?   @db.VarChar(25)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  booking   Booking[]
}

model Owner {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(25)
  lastname  String   @db.VarChar(25)
  email     String   @unique
  password  String
  cellphone String?  @db.VarChar(25)
  country   String?  @db.VarChar(25)
  state     String?  @db.VarChar(25)
  about     String?  @db.Text
  photo     String?  @db.VarChar(25)
  cars      Cars[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id            String   @id @default(uuid())
  carId         String
  car           Cars     @relation(fields: [carId], references: [id])
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  startDate     DateTime
  endDate       DateTime
  amount        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Order {
  id            String   @id @default(uuid())
  carId         String
  car           Cars     @relation(fields: [carId], references: [id])
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  startDate     DateTime
  endDate       DateTime
  amount        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
